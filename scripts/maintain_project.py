#!/usr/bin/env python3
"""
Project Maintenance Script
Run this script regularly to keep the project organized and clean.
"""

import os
import shutil
import glob
from pathlib import Path
from datetime import datetime

def check_python_cache():
    """Check for Python cache files and remove them."""
    print("🔍 Checking for Python cache files...")
    
    cache_found = False
    for root, dirs, files in os.walk('.'):
        for dir_name in dirs:
            if dir_name == '__pycache__':
                cache_path = os.path.join(root, dir_name)
                print(f"  Found cache: {cache_path}")
                shutil.rmtree(cache_path, ignore_errors=True)
                cache_found = True
        
        for file_name in files:
            if file_name.endswith(('.pyc', '.pyo')):
                file_path = os.path.join(root, file_name)
                print(f"  Found cache file: {file_path}")
                os.remove(file_path)
                cache_found = True
    
    if not cache_found:
        print("  ✅ No cache files found")
    else:
        print("  🧹 Cache files cleaned up")

def check_directory_structure():
    """Ensure all necessary directories exist."""
    print("🏗️  Checking directory structure...")
    
    required_dirs = ['docs', 'scripts', 'tests', 'config']
    for directory in required_dirs:
        if not os.path.exists(directory):
            print(f"  Creating missing directory: {directory}")
            Path(directory).mkdir(exist_ok=True)
        else:
            print(f"  ✅ {directory}/ exists")

def check_documentation():
    """Check if documentation is properly organized."""
    print("📚 Checking documentation organization...")
    
    docs_dir = Path('docs')
    if not docs_dir.exists():
        print("  ❌ docs/ directory missing")
        return
    
    # Check for documentation files in root that should be in docs/
    doc_files = [
        'BRAIN_INTERFACE_GUIDE.md',
        'BRAIN_PLUGIN_STRUCTURE.md',
        'CURSOR_SETUP_COMPLETE.md',
        'DATABASE_INTEGRATION_COMPLETE.md',
        'DOCKER_SETUP.md',
        'SHARING_README.md',
        'TESTING_SUMMARY.md',
        'TOOL_EXECUTION_FLOWS.md'
    ]
    
    misplaced_docs = []
    for doc_file in doc_files:
        if os.path.exists(doc_file) and not os.path.exists(f"docs/{doc_file}"):
            misplaced_docs.append(doc_file)
    
    if misplaced_docs:
        print(f"  ⚠️  Found {len(misplaced_docs)} misplaced documentation files")
        for doc in misplaced_docs:
            print(f"    - {doc}")
    else:
        print("  ✅ Documentation properly organized")

def check_docker_files():
    """Check Docker configuration consistency."""
    print("🐳 Checking Docker configuration...")
    
    # Check for duplicate Docker files
    docker_files = [
        'docker-compose.yml',
        'docker-compose-shareable.yml',
        'docker-compose-minimal.yml',
        'Dockerfile',
        'Dockerfile.shareable'
    ]
    
    existing_files = []
    for file_path in docker_files:
        if os.path.exists(file_path):
            existing_files.append(file_path)
    
    if len(existing_files) > 2:  # Should only have docker-compose.yml and Dockerfile
        print(f"  ⚠️  Found {len(existing_files)} Docker files, consider consolidating")
        for file_path in existing_files:
            print(f"    - {file_path}")
    else:
        print("  ✅ Docker configuration looks clean")

def generate_maintenance_report():
    """Generate a maintenance report."""
    print("📊 Generating maintenance report...")
    
    report = f"""# Project Maintenance Report

Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Directory Structure
"""
    
    for item in sorted(os.listdir('.')):
        if os.path.isdir(item) and not item.startswith('.'):
            report += f"- 📁 {item}/\n"
        elif not item.startswith('.'):
            report += f"- 📄 {item}\n"
    
    report += f"""

## Maintenance Actions
- Python cache files checked and cleaned
- Directory structure verified
- Documentation organization checked
- Docker configuration reviewed

## Recommendations
1. Run this script weekly to maintain project organization
2. Keep documentation in the docs/ directory
3. Use scripts/ directory for utility scripts
4. Maintain consistent file naming conventions

---
Generated by maintain_project.py
"""
    
    with open('MAINTENANCE_REPORT.md', 'w') as f:
        f.write(report)
    
    print("  ✅ Maintenance report generated: MAINTENANCE_REPORT.md")

def main():
    """Main maintenance function."""
    print("🔧 Memory Context Manager v2 - Project Maintenance")
    print("=" * 60)
    
    try:
        check_python_cache()
        check_directory_structure()
        check_documentation()
        check_docker_files()
        generate_maintenance_report()
        
        print("\n" + "=" * 60)
        print("🎉 Project maintenance completed!")
        print("📁 Check MAINTENANCE_REPORT.md for details")
        print("💡 Run this script weekly to keep your project organized!")
        
    except Exception as e:
        print(f"❌ Error during maintenance: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
